#include <stdio.h>
#include <stdlib.h>
#include <math.h>


long long mod_exp(long long base, long long exp, long long mod) {
    long long result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}


long long gcd(long long a, long long b) {
    while (b != 0) {
        long long temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}


long long mod_inverse(long long a, long long m) {
    long long m0 = m;
    long long y = 0, x = 1;
    if (m == 1) return 0;
    while (a > 1) {
        long long q = a / m;
        long long t = m;
        m = a % m;
        a = t;
        t = y;
        y = x - q * y;
        x = t;
    }
    if (x < 0) x += m0;
    return x;
}


void generate_keys(long long *e, long long *d, long long *n) {
    
    long long p = 61;
    long long q = 53;

    
    *n = p * q;

    
    long long phi = (p - 1) * (q - 1);

    
    *e = 17;  
   
    *d = mod_inverse(*e, phi);
}


long long encrypt(long long message, long long e, long long n) {
    return mod_exp(message, e, n);
}


long long decrypt(long long cipher, long long d, long long n) {
    return mod_exp(cipher, d, n);
}

int main() {
    
    long long e, d, n;
    generate_keys(&e, &d, &n);

    printf("Public Key: (e = %lld, n = %lld)\n", e, n);
    printf("Private Key: (d = %lld, n = %lld)\n\n", d, n);

    
    long long message = 42;  
    printf("Original Message: %lld\n", message);

    long long cipher = encrypt(message, e, n);
    printf("Encrypted Cipher: %lld\n", cipher);

    
    long long decrypted_message = decrypt(cipher, d, n);
    printf("Decrypted Message: %lld\n", decrypted_message);

    return 0;
}


