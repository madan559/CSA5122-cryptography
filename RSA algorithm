#include <stdio.h>
#include <string.h>
#include <math.h>

int gcd(int a, int b) {
    while(b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int modInverse(int e, int phi) {
    int d = 1;
    while((d * e) % phi != 1) {
        d++;
    }
    return d;
}

long long modExp(int base, int exp, int mod) {
    long long result = 1;
    for(int i = 0; i < exp; i++) {
        result = (result * base) % mod;
    }
    return result;
}

int main() {
    // Example small primes
    int p = 17;
    int q = 11;
    int n = p * q;            // n = 187
    int phi = (p - 1) * (q - 1);  // phi = 160

    // Choose e (1 < e < phi, gcd(e, phi) == 1)
    int e = 7; // usually a small prime
    if(gcd(e, phi) != 1) {
        printf("e and phi are not coprime.\n");
        return 1;
    }

    // Compute d (modular inverse of e mod phi)
    int d = modInverse(e, phi);

    char message[] = "my name is madan kumar";
    long long encrypted[100];
    char decrypted[100];
    int len = strlen(message);

    printf("Original message: %s\n", message);

    // Encrypt
    printf("Encrypted: ");
    for(int i = 0; i < len; i++) {
        encrypted[i] = modExp((int)message[i], e, n);
        printf("%lld ", encrypted[i]);
    }
    printf("\n");

    // Decrypt
    for(int i = 0; i < len; i++) {
        decrypted[i] = (char)modExp(encrypted[i], d, n);
    }
    decrypted[len] = '\0';

    printf("Decrypted message: %s\n", decrypted);

    return 0;
}
